{"version":3,"sources":["../../../projects/ng-code-verification/src/lib/code.ts","../../../projects/ng-code-verification/src/lib/codes.ts","../../../projects/ng-code-verification/src/lib/ng-code-verification.component.ts","../../../projects/ng-code-verification/src/lib/ng-code-verification.module.ts"],"names":["Code","this","pFormControl","FormControl","Validators","required","pId","numberSeq","console","log","Object","defineProperty","prototype","pError","value","pValue","valueTemp","Codes","qtde","index","el","Array","from","length","next","evt","idEl","parseInt","srcElement","id","split","target","nextEl","document","getElementById","focus","getArrayCodes","map","elTemp","toString","getCode","join","validCodes","_this","errors","valid","forEach","setError","idTemp","error","NgCodeVerificationComponent","codeComplete","EventEmitter","codeTotal","ngOnInit","codes","onInput","onCodeCompleted","checkIfLast","emit","code","Component","args","selector","template","ViewChildren","Output","Input","NgModule","declarations","imports","BrowserModule","exports"],"mappings":"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","sourcesContent":["import { FormControl, Validators } from '@angular/forms';\n\nexport default class Code {\n\n    static numberSeq = 1;\n    private pError: boolean;\n    private pFormControl: FormControl;\n    private pValue: number;\n    private pId: string;\n\n    constructor()\n    {\n        this.pFormControl = new FormControl('', Validators.required);\n        this.pId = 'field_'  + Code.numberSeq;\n        Code.numberSeq ++;\n\n        console.log('static varibale', Code.numberSeq);\n    }\n\n    /**\n     * Get Error\n     */\n    public get error(): boolean\n    {\n        return this.pError;\n    }\n\n    /**\n     * Set Error\n     */\n    public set error(value: boolean)\n    {\n        this.pError = value;\n    }\n\n    /**\n     * Get FormControl\n     */\n    public get formControl(): FormControl\n    {\n        return this.pFormControl;\n    }\n\n    /**\n     * Get Value\n     */\n    public get value(): number\n    {\n        return this.pValue;\n    }\n\n    /**\n     * Set Value\n     */\n    public set value(valueTemp: number)\n    {\n        this.pValue = valueTemp;\n    }\n\n    /**\n     * Get ID\n     */\n    public get id(): string\n    {\n        return this.pId;\n    }\n\n    \n}\n","import Code from './code';\n\nexport default class Codes {\n\n    public el: Code[];\n    public index = 0;\n\n    constructor(qtde: number)\n    {\n        this.el = Array.from({length: qtde}, () => new Code());\n    }\n\n    next(evt): void\n    {\n        const idEl = parseInt(evt.srcElement.id.split('_')[1], 0);\n\n        // update value\n        this.el[idEl - 1].value = evt.target.value;\n\n        const nextEl = idEl < this.el.length ? (idEl + 1) : this.el.length;\n        const el = document.getElementById('field_' + nextEl) as HTMLInputElement;\n        el.focus();\n\n        if (nextEl < this.el.length){\n            el.value = '';\n        }\n    }\n\n    getArrayCodes(): string[]\n    {\n        return this.el.map(elTemp => elTemp.value ? elTemp.value.toString() : '');\n    }\n\n    getCode(): string\n    {\n        return this.getArrayCodes().join('');\n    }\n\n    validCodes(): boolean\n    {\n        const errors = this.el.map(elTemp => !elTemp.value ? false : true);\n        let valid = true;\n        errors.forEach((value, index) => {\n            if (!value)\n            {\n                this.setError(index + 1, true);\n                valid = false;\n            }\n            else {\n                this.setError(index + 1, false);\n            }\n        });\n\n        return valid;\n    }\n\n    setError(idTemp, value): void\n    {\n        this.el[idTemp - 1].error = value;\n    }\n\n}\n","import { Component, OnInit, Input, ViewChildren, QueryList, ElementRef, Output, EventEmitter } from '@angular/core';\nimport Codes from './codes';\n\n@Component({\n  selector: 'ng-code-verification',\n  template: `\n    <div #formCode>\n      <input\n        type=\"text\"\n        maxlength=\"1\"\n        class=\"codeInput\"\n        *ngFor=\"let codeTemp of codes.el\"\n        [formControl]=\"codeTemp.formControl\"\n        [id]=\"codeTemp.id\"\n        (input)=\"onInput($event)\"\n        [class.is-invalid]=\"codeTemp.error\"\n        maxlength=\"1\"\n      />\n    </div>\n  `,\n  styleUrls: ['./ng-code-verification.css']\n})\nexport class NgCodeVerificationComponent implements OnInit {\n\n  @ViewChildren('formCode') formCode: QueryList<ElementRef>;\n  @Output() codeComplete = new EventEmitter<{ code: string, valid: boolean}>();\n  @Input() codeTotal = 0;\n  codes: Codes;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.codes = new Codes(this.codeTotal);\n  }\n\n  onInput(evt): void\n  {\n    this.codes.next(evt);\n    this.onCodeCompleted();\n\n    if (this.checkIfLast(evt))\n    {\n      this.onCodeCompleted();\n    }\n  }\n\n  public checkIfLast(evt): boolean\n  {\n    const id = parseInt(evt.srcElement.id.split('_')[1], 0);\n    return id >= this.codes.el.length ? true : false;\n  }\n\n  public onCodeCompleted(): void\n  {\n    this.codeComplete.emit(\n      {\n        code: this.codes.getCode(), \n        valid: this.codes.validCodes()\n      }\n    );\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgCodeVerificationComponent } from './ng-code-verification.component';\n\n\n\n@NgModule({\n  declarations: [NgCodeVerificationComponent],\n  imports: [\n    BrowserModule\n  ],\n  exports: [NgCodeVerificationComponent]\n})\nexport class NgCodeVerificationModule { }\n"]}